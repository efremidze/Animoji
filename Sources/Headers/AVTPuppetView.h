//
//  AVTPuppetView.h
//  Animoji
//
//  Created by Lasha Efremidze on 11/10/17.
//  Copyright Â© 2017 Lasha Efremidze. All rights reserved.
//

/* Generated by RuntimeBrowser
 Image: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit
 */

//@interface AVTPuppetView : AVTAvatarView <ARRecordingTechniqueDelegate> {
//    bool  _actionStarted;
//    double  _actionT0;
//    ARSession * _arSession;
//    AVCaptureSession * _audioCaptureSession;
//    bool  _audioIsRecording;
//    NSLock * _audioLock;
//    AVPlayer * _audioPlayer;
//    AVAssetWriter * _audioWriter;
//    AVAssetWriterInput * _audioWriterInput;
//    CAAnimation * _backedAnimation;
//    int  _benchFrameCounter;
//    NSArray * _blendShapeNames;
//    unsigned int  _blendShapesCount;
//    bool  _captureImageIsTooDark;
//    struct {
//        long long value;
//        int timescale;
//        unsigned int flags;
//        long long epoch;
//    }  _currentAudioTime;
//    double  _currentlyRenderedTrackingDate;
//    AVTPuppetDebugView * _debugView;
//    SCNNode * _defaultLighting;
//    bool  _directRetargetingMode;
//    bool  _disableRendering;
//    bool  _doubleBuffer;
//    NSMutableArray * _droppedDoubleBufferFrames;
//    int  _droppedFrameCount;
//    bool  _enableGazeCorrection;
//    bool  _exportingMovie;
//    bool  _faceIsTracked;
//    ARConfiguration * _faceTracking;
//    NSURL * _faceTrackingRecordingURL;
//    bool  _forceFaceTrackingOff;
//    long long  _frame_id;
//    SCNNode * _headNode;
//    int  _isFading;
//    double  _lastARFrameTime;
//    double  _lastAudioPlayerTime;
//    double  _lastAudioSystemTime;
//    unsigned long long  _lastTrackingCaptureTimestamp;
//    double  _lastTrackingDate;
//    unsigned long long  _lastTrackingUpdateTimestamp;
//    NSLock * _lock;
//    int  _morphTargetCount;
//    AVCaptureMovieFileOutput * _movieFileOutput;
//    bool  _mute;
//    SCNNode * _neckNode;
//    SCNNode * _neckPivotNode;
//    unsigned long long  _noTrackingFrameCount;
//    bool  _packetNeedRecording;
//    struct {
//        double refTimestamp;
//        double arDelegateTimestamp;
//        double updateTimestamp;
//    }  _perfPacket;
//    NSTimer * _perfTimeRefreshTimer;
//    struct {
//        struct os_unfair_lock_s {
//            unsigned int _os_unfair_lock_opaque;
//        } lock;
//        struct { /* ? */ } *head;
//        int current;
//        int capacity;
//        bool reached_max_capacity;
//    }  _perfTimes;
//    bool  _playBackedAnimation;
//    bool  _playing;
//    long long  _preferredFramesPerSecond_thermal;
//    long long  _preferredFramesPerSecond_user;
//    NSObject<OS_dispatch_queue> * _preloadQueue;
//    float * _rawBlendShapes;
//    NSMutableData * _rawBlendShapesData;
//    double * _rawTimes;
//    NSMutableData * _rawTimesData;
//    struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } * _rawTransforms;
//    NSMutableData * _rawTransformsData;
//    CAAnimationGroup * _recordedAnimationGroup;
//    int  _recordedCount;
//    long long  _recordedSampleCount;
//    bool  _recording;
//    int  _recordingCapacity;
//    NSObject<OS_dispatch_semaphore> * _recordingSemaphore;
//    ARRecordingTechnique * _recordingTechnique;
//    SCNMaterial * _shadowPlaneMaterial;
//    bool  _shouldPauseFaceTracking;
//    bool  _showPerfHUD;
//    SCNNode * _specializedLighting;
//    struct {
//        long long value;
//        int timescale;
//        unsigned int flags;
//        long long epoch;
//    }  _startAudioTime;
//    struct {
//        long long value;
//        int timescale;
//        unsigned int flags;
//        long long epoch;
//    }  _stopAudioTime;
//    double  _t0;
//    double  _timeBetweenARFrame;
//    struct {
//        double timestamp;
//        /* Warning: Unrecognized filer type: '"' using 'void*' */ void*translation;
//    }  _trackingData;
//    NSLock * _trackingDataLock;
//    bool  _trackingIsPaused;
//    SCNNode * _trackingLostIndicator;
//    bool  _trackingLostIndicatorVisible;
//    bool  _transitioningFromSnapshot;
//    bool  _waitMetalAndReplay;
//    int * _weightIndexIndirection;
//    SCNNode * _whitePlane;
//}
//
//@property (readonly) ARSession *arSession;
//@property (nonatomic, readonly) bool captureImageIsTooDark;
//@property (readonly, copy) NSString *debugDescription;
//@property (readonly, copy) NSString *description;
//@property (nonatomic) bool directRetargetingMode;
//@property (nonatomic) bool disableRendering;
//@property (nonatomic) bool enableGazeCorrection;
//@property (nonatomic, readonly) bool faceIsFullyActive;
//@property (nonatomic, readonly) bool faceIsTracked;
//@property (getter=faceTrackingIsPaused, nonatomic) bool faceTrackingPaused;
//@property (copy) NSURL *faceTrackingRecordingURL;
//@property (readonly) unsigned long long hash;
//@property (nonatomic) bool mute;
//@property (nonatomic) bool playBakedAnimation;
//@property (getter=isPreviewing, nonatomic, readonly) bool previewing;
//@property (nonatomic, retain) NSDictionary *puppetState;
//@property (getter=isRecording, nonatomic, readonly) bool recording;
//@property (nonatomic) bool showPerfHUD;
//@property (readonly) Class superclass;
//
//+ (struct SCNVector4 { float x1; float x2; float x3; float x4; })applyGazeCorrectionWithInputAngletranlation;
//+ (void)setUsesInternalTrackingPipeline:(bool)arg1;
//+ (bool)usesInternalTrackingPipeline;
//
//- (void).cxx_destruct;
//- (void)_avt_commonInit;
//- (void)_drawAtTime:(double)arg1;
//- (void)_playLivePreviewAnimation;
//- (void)_processInfoThermalStateDidChange:(id)arg1;
//- (void)_refreshPerfTimesInfo;
//- (double)_renderer:(id)arg1 inputTimeForCurrentFrameWithTime:(double)arg2;
//- (void)_resetFaceToIdlePosition;
//- (void)_resetFaceToRandomPosition;
//- (void)_setAvatarInstance:(id)arg1;
//- (void)_setEffectivePreferredFramesPerSecond;
//- (void)_setupARKitWithRecordTechnique:(bool)arg1;
//- (void)_smoothRecordedData;
//- (id)_tmpAudioURL;
//- (id)_tmpVideoURL;
//- (void)_updateAtTime:(double)arg1;
//- (void)_updateFaceIsTrackedState;
//- (void)_updateFrameRateForThermalState:(long long)arg1;
//- (void)_updateTrackingState;
//- (id)arSession;
//- (void)audioPlayerItemDidReachEnd:(id)arg1;
//- (void)avatarInstanceDidChange;
//- (void)cancelMovieExport;
//- (void)cancelRecording;
//- (void)cancelRecordingAudio;
//- (bool)captureImageIsTooDark;
//- (id)convertRecordedDataToAnimationGroup;
//- (struct opaqueCMSampleBuffer { }*)createSilentAudioAtFrame:(long long)arg1 nFrames:(int)arg2 sampleRate:(double)arg3 numChannels:(int)arg4;
//- (void)dealloc;
//- (bool)directRetargetingMode;
//- (bool)disableRendering;
//- (void)drawableNotAvailableForTime:(double)arg1;
//- (bool)enableGazeCorrection;
//- (bool)exportMovieToURL:(id)arg1 options:(id)arg2 completionHandler:(id)arg3;
//- (bool)faceIsFullyActive;
//- (bool)faceIsTracked;
//- (bool)faceTrackingIsPaused;
//- (id)faceTrackingRecordingURL;
//- (void)fadePuppetToWhite:(float)arg1;
//- (double)finalVideoDuration;
//- (void)finalizeAudioFile;
//- (void)hideDropShadow:(bool)arg1;
//- (void)hideTrackingLossIndicator;
//- (id)init;
//- (id)initWithCoder:(id)arg1;
//- (void)installLighting:(id)arg1;
//- (bool)isPreviewing;
//- (bool)isRecording;
//- (void)layoutSubviews;
//- (void)mergeAudio:(id)arg1 andVideoTo:(id)arg2 error:(id*)arg3;
//- (bool)mute;
//- (void)mutePlayingAudio;
//- (bool)playBakedAnimation;
//- (void)playPreviewOnce;
//- (long long)preferredFramesPerSecond;
//- (id)puppet;
//- (id)puppetState;
//- (bool)recording;
//- (double)recordingDuration;
//- (void)renderer:(id)arg1 didRenderScene:(id)arg2 atTime:(double)arg3;
//- (void)renderer:(id)arg1 updateAtTime:(double)arg2;
//- (void)renderer:(id)arg1 willRenderScene:(id)arg2 atTime:(double)arg3;
//- (void)session:(id)arg1 didFailWithError:(id)arg2;
//- (void)session:(id)arg1 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
//- (void)session:(id)arg1 didUpdateFrame:(id)arg2;
//- (void)sessionInterruptionEnded:(id)arg1;
//- (void)sessionWasInterrupted:(id)arg1;
//- (void)setAvatarInstance:(id)arg1;
//- (void)setBackgroundColor:(id)arg1;
//- (void)setCaptureImageIsTooDark:(bool)arg1;
//- (void)setDirectRetargetingMode:(bool)arg1;
//- (void)setDisableRendering:(bool)arg1;
//- (void)setEnableGazeCorrection:(bool)arg1;
//- (void)setFaceIsTracked:(bool)arg1;
//- (void)setFaceTrackingPaused:(bool)arg1;
//- (void)setFaceTrackingRecordingURL:(id)arg1;
//- (void)setMute:(bool)arg1;
//- (void)setPlayBakedAnimation:(bool)arg1;
//- (void)setPreferredFramesPerSecond:(long long)arg1;
//- (void)setPuppetState:(id)arg1;
//- (void)setShowPerfHUD:(bool)arg1;
//- (void)setup;
//- (void)setupARKit;
//- (void)setupARKitWithRecordTechnique;
//- (bool)showPerfHUD;
//- (void)showTrackingLossIndicator;
//- (void)simulateFaceTrackingLoss:(bool)arg1;
//- (struct UIImage { Class x1; }*)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1;
//- (void)startPlayingAudio;
//- (void)startPreviewing;
//- (void)startRecording;
//- (void)startRecordingAudio;
//- (void)stopPlayingAudio;
//- (void)stopPreviewing;
//- (void)stopRecording;
//- (void)stopRecordingAudio;
//- (void)technique:(id)arg1 didFinishWithResult:(id)arg2;
//- (id)transitionTexture;
//- (void)trimRecordedData;
//- (void)updateAtTime:(double)arg1;
//- (void)updateAudioState;
//- (void)updateBlendShapeIndirection;
//
//@end

@import Foundation;
#import "AVTAvatarView.h"

@interface AVTPuppetView: AVTAvatarView
@property (getter=isPreviewing, nonatomic, readonly) bool previewing;
@property (getter=isRecording, nonatomic, readonly) bool recording;
- (void)audioPlayerItemDidReachEnd:(id)arg1;
- (bool)exportMovieToURL:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (UIImage*)snapshotWithSize:(CGSize)arg1;
- (double)recordingDuration;
- (void)startPreviewing;
- (void)startRecording;
- (void)stopPreviewing;
- (void)stopRecording;
- (UIImage*)snapshotWithSize:(CGSize)arg1;
@end
